// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/gin-gonic/gin"
	"github.com/lazyfury/pulse/framework"
	"github.com/lazyfury/pulse/framework/driver"
	"github.com/spf13/viper"
	"github.com/yoomall/yoomall/apps/auth"
	handler2 "github.com/yoomall/yoomall/apps/auth/handler"
	"github.com/yoomall/yoomall/apps/auth/middleware"
	"github.com/yoomall/yoomall/apps/auth/service"
	"github.com/yoomall/yoomall/apps/common"
	handler3 "github.com/yoomall/yoomall/apps/common/handler"
	"github.com/yoomall/yoomall/apps/common/service"
	"github.com/yoomall/yoomall/apps/example"
	"github.com/yoomall/yoomall/apps/example/handler"
	"github.com/yoomall/yoomall/apps/example/handler/v2"
	"github.com/yoomall/yoomall/apps/post"
	"github.com/yoomall/yoomall/apps/views"
)

// Injectors from wire.go:

func NewApp(conf *viper.Viper, db *driver.DB, setupEngine func(*gin.Engine) *gin.Engine) *framework.HttpServer {
	dtkHandler := handler.NewDtkHandler(conf)
	authMiddlewareGroup := authmiddleware.NewAuthMiddlewareGroup(db)
	menuHandler := handler.NewMenuHandler(db, authMiddlewareGroup)
	jtkHandler := handler.NewJtkHandler(conf)
	defaultApp := example.NewWireDefaultApp(conf, db, dtkHandler, menuHandler, jtkHandler)
	baseHandlerV2 := appHandlerV2.NewBaseHandler()
	defaultV2App := example.NewDefaultV2App(conf, db, baseHandlerV2)
	authService := authservice.NewAuthService(db)
	userHandler := handler2.NewUserHandler(db, conf, authService, authMiddlewareGroup)
	userRoleHandler := handler2.NewUserRoleHandler(db, authMiddlewareGroup)
	userTokenHandler := handler2.NewUserTokenHandler(db, authMiddlewareGroup)
	permissionHandler := handler2.NewPermissionHandler(db, authMiddlewareGroup)
	authApp := auth.NewAuthApp(conf, db, authService, userHandler, userRoleHandler, userTokenHandler, permissionHandler)
	postApp := post.NewDefaultApp(conf, db)
	notFoundRecordService := commonservice.NewNotFoundRecordService(db)
	notFoundRecordHandler := handler3.NewNotFoundRecordHandler(db, notFoundRecordService)
	systemConfigService := commonservice.NewSystemConfigService(db)
	systemConfigHandler := handler3.NewSystemConfigHandler(db, systemConfigService, authMiddlewareGroup)
	commonApp := common.NewCommonApp(conf, db, notFoundRecordHandler, systemConfigHandler)
	viewsApp := views.NewViewApp(db, conf)
	doc := NewDoc()
	httpServer := NewHttpServer(conf, defaultApp, defaultV2App, authApp, postApp, commonApp, viewsApp, notFoundRecordService, doc, setupEngine)
	return httpServer
}
